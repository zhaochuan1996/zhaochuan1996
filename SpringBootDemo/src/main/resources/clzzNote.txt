============= day_01 ===========
知识回顾
	Spring
		ioc、aop（oop）、事务、mvc
准备工作
	环境
		java：jdk8
		ied：idea
		maven：3.x
		mysql：5.x
		代码管理：git（github、码云）
	常用软件：
		浏览器：firefox、chrome
		文本编译器：noted++
		测试工具：postman
	常用的网址
		maven：https://mvnrepository.com
		码云: https://gitee.com/

Spring Boot 基础介绍
	spring boot 不是一个新的框架，基于spring 4.0，就像maven 一样，它整合了大量主流的第三方框架，形成的一套“快速开发的框架”；
	特性
		快速开发；
		pom，以 starter 形式，按照组类聚了多个jar，形成单条依赖，以父子继承的方式，实现 jar 版本的控制；
		“习惯优于配置”，简化了配置，没有web.xml
		注解开发
		内嵌式的servlet容器，无需外置容器
		监控的方便性
	why？
		配置、编码、部署变得简单
	mvc、boot、cloud
		mvc：spring web框架，
		boot：集成了 mvc、垂直的框架大集成者；
		cloud：分布式应用的大集成者，三维立体的，每一个应用基于 boot；

常用的注解
	@SpringBootApplication：启动boot 项目
	@Configuration：配置类注解 ---- <beans></beans>；
	@Bean：注册 bean 注解 ---- <bean></bean>；
	@PropertySource ---- 绑定配置文件；
	@ConfigurationProperties ---- 设置配置类属性
	@Value：读取配置文件 || 读取配置文件属性；
	@Component：注册 spring 组件；
	@Autowired ---- 按照 bean 的类型组装 Bean
	@Resource ---- 按照 Bean 的名字组装 Bean；
	@Aspect（@Bedore、@Aroud、@After、@PointCut、@Oder） ----- Aop 注解
	@Transational ---- 事务注解
	@Controller（RestControler） ----- 控制层注解
		@RequestMapping、@GetMapping、@PostMapping、@PutMapping、@DeleteMapping
	@Service ----- 服务层注解
	@Repository ---- 持久层注解
	
搭建 Spring Boot 框架
	folder、source folder、resource folder、fackage 四者的区别
	规范性：结构清晰、缩进清晰、命名清晰、逻辑清晰
	
配置文件
	种类：
		bootstrap.property(yml) ---- 父上下文配置
		application.property（yml） ---- 全局配置文件
		其他配置文件：log
	优先级
		相同位置，property > yml
		不同的位置
			外置 /config/application.property(yml)
			外置 /application.property(yml)
			内置 /config/application.property(yml)
			内置 /application.property(yml)
	读取
		全局配置文件： @Value 读取配置文件中的值
		
logback 日志系统
	步骤一：pom导入相关 jar ---- 已经引入，无需手动添加
	步骤二：配置
		特有配置文件 ---- logback-dev.xml
		全局配置文件
			# for log
			logging.config=classpath:config/logback-dev.xml
		配置类
	步骤三：应用
		
	
作业
	创建一个 spring boot 项目，提交到远程代码仓库。 ----- 各位远程代码仓库的地址
	完成配置文件读取，以接口的方式运行出来
	加入logback日志系统
	思考题：如何将 spring boot 项目打包成 war，部署到外置 tomcat 项目，并运行成功
	
============= day_02 ===========
多环境的配置
	三个环境：dev（for 开发人员）、staging（for 测试人员）、live（生产环境）
	application-{profile}.properties ---- {profile}：环境占位符
		全局配置：apllication.properties
		dev环境配置：apllication-dev.properties
		live环境配置：apllication-live.properties
		
	步骤一：pom引入 jar ---- spring 自带功能，无需引入
	步骤二：配置
		新建dev、live 环境的 log 配置，修改日志级别；
		新建spring dev、live的配置文件，分别指向不同的log配置文件；
		全局配置中引入环境配置：spring.profiles.active=dev
	步骤三：应用
		修改全局配置中环境设置，调用log接口，查看日志输出是否正确
		
热部署配置
	步骤一：导入jar
		<!-- spring dev tools -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	步骤二：配置
		application.properties
			# for dev tools
			spring.devtools.restart.enabled=true
			spring.devtools.restart.additional-paths=src/main/java
	步骤三：应用
		修改java代码，查看是否热部署成功
		
http & https 配置
	http: 超文本传输协议，默认端口 80，数据不安全；
	https：安全的超文本传输协议，默认端口 443，数据是安全的 ssl证书；
	SSL ---- CA 颁发证书
		域名型的：信任级别比较低的；
		企业级别的：信任级别中等；
		增强型证书：信任级别最高
		------------------
		获取证书的途径
			网上购买
			手动生成：keytool -genkey -alias tomcat -keyalg RSA
	步骤一：pom引入jar ---- 无需引入；
	步骤二：配置
		application.properties
			# for ssl
			server.ssl.key-store=classpath:.keystore
			server.ssl.key-store-password=111111
		配置类
			
	步骤三：应用
		直接访问 http https
		
Mybatis
	步骤一：引入jar
		数据库、连接池、mybatis、分页插件
		<!-- mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.0</version>
        </dependency>
        <!-- pageHelper -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.2.12</version>
        </dependency>
	步骤二：配置
		application.xml
			# for data source
			# mysql 5
			spring.datasource.driver-class-name=com.mysql.jdbc.Driver
			# mysql 6 +
			#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
			spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
			spring.datasource.username=root
			spring.datasource.password=root

			# hikari pool
			spring.datasource.hikari.maximum-pool-size=20
			spring.datasource.hikari.minimum-idle=5
			spring.datasource.hikari.idle-timeout=180000
			spring.datasource.hikari.auto-commit=true

			# for mybatis
			mybatis.configuration.map-underscore-to-camel-case=true
			#mybatis.type-aliases-package=com.hqyj.SpringBootDemo.modules.*.entity
			#mybatis.mapper-locations=classpath:mapper/*Mapper.xml
		步骤三：应用
			创建 表、entity
			“控制器”拆分的思想
				模块控制器：页面的跳转；
				entity控制器：数据的处理，形成接口；
			dao
			
			
	作业
		多环境配置
		http & https 配置
		getCitiesByCountryId
		getCitiesBySearchVo
		getCountryByCountryId
		getCountryByCountryName
				
			
		
		
		
	
		
		
		
		
		
		